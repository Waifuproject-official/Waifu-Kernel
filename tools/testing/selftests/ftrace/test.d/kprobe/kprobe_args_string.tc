#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# description: Kprobe event string type argument

[ -f kprobe_events ] || exit_unsupported # this is configurable

echo 0 > events/enable
echo > kprobe_events

case `uname -m` in
x86_64)
<<<<<<< HEAD
  ARG2=%si
  OFFS=8
;;
i[3456]86)
  ARG2=%cx
  OFFS=4
;;
aarch64)
  ARG2=%x1
  OFFS=8
;;
arm*)
  ARG2=%r1
  OFFS=4
=======
  ARG1=%di
;;
i[3456]86)
  ARG1=%ax
;;
aarch64)
  ARG1=%x0
;;
arm*)
  ARG1=%r0
;;
ppc64*)
  ARG1=%r3
;;
ppc*)
  ARG1=%r3
>>>>>>> v4.19.83
;;
*)
  echo "Please implement other architecture here"
  exit_untested
esac

: "Test get argument (1)"
<<<<<<< HEAD
echo "p:testprobe create_trace_kprobe arg1=+0(+0(${ARG2})):string" > kprobe_events
echo 1 > events/kprobes/testprobe/enable
! echo test >> kprobe_events
tail -n 1 trace | grep -qe "testprobe.* arg1=\"test\""

echo 0 > events/kprobes/testprobe/enable
: "Test get argument (2)"
echo "p:testprobe create_trace_kprobe arg1=+0(+0(${ARG2})):string arg2=+0(+${OFFS}(${ARG2})):string" > kprobe_events
echo 1 > events/kprobes/testprobe/enable
! echo test1 test2 >> kprobe_events
tail -n 1 trace | grep -qe "testprobe.* arg1=\"test1\" arg2=\"test2\""
=======
echo "p:testprobe tracefs_create_dir arg1=+0(${ARG1}):string" > kprobe_events
echo 1 > events/kprobes/testprobe/enable
echo "p:test _do_fork" >> kprobe_events
grep -qe "testprobe.* arg1=\"test\"" trace

echo 0 > events/kprobes/testprobe/enable
: "Test get argument (2)"
echo "p:testprobe tracefs_create_dir arg1=+0(${ARG1}):string arg2=+0(${ARG1}):string" > kprobe_events
echo 1 > events/kprobes/testprobe/enable
echo "p:test _do_fork" >> kprobe_events
grep -qe "testprobe.* arg1=\"test\" arg2=\"test\"" trace
>>>>>>> v4.19.83

echo 0 > events/enable
echo > kprobe_events
